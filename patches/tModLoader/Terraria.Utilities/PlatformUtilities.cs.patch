--- src/Terraria\Terraria.Utilities\PlatformUtilities.cs
+++ src/tModLoader\Terraria.Utilities\PlatformUtilities.cs
@@ -41,15 +_,25 @@
 					IsLinux = true;
 					break;
 			}
+			if(IntPtr.Size==8)
+			{
+				Is64=true;
+			}
+			else
+			{
+				Is86=true;
+			}
 		}
 
 		public static readonly bool IsMono = Type.GetType("Mono.Runtime") != null;
 		
 		public const bool IsFNA = true;
 		public const bool IsXNA = !IsFNA;
-		public static readonly bool IsWindows = false;
 		public static readonly bool IsOSX = false;
 		public static readonly bool IsLinux = false;
+		public static readonly bool IsWindows = false;
+		public static readonly bool Is64=false;
+		public static readonly bool Is86=false;
 
 		public unsafe static void SavePng(Stream stream, int width, int height, int imgWidth, int imgHeight, byte[] data)
 		{
@@ -73,5 +_,34 @@
 			int count = ((int)array[33] << 24 | (int)array[34] << 16 | (int)array[35] << 8 | (int)array[36]) + 41 + 57;
 			stream.Write(array, 0, count);
 		}
+
+		public static string ConvertToPlatformSpecificName(string name)
+		{
+			if(name=="Steamworks.NET")
+			{
+				if(IsWindows)
+				{
+					if(IntPtr.Size==8)
+					{
+						return name+".Windows64";
+					}
+					return name+".Windows86";
+				}
+				if(IsOSX){return name+".OSX";}
+				if(IsLinux){return name+".Linux";}
+				throw new Exception("Unrecognized supported.");
+			}
+			return name;
+		}
+
+		public static bool IsCompatibleDLL(string name)
+		{
+			if(name.EndsWith(".dll")){name=name.Substring(0,name.Length-4);}
+			if(name.EndsWith(".Windows64"))	{return !IsWindows||!Is64;}
+			if(name.EndsWith(".Windows86"))	{return !IsWindows||!Is86;}
+			if(name.EndsWith(".OSX"))		{return !IsOSX;}
+			if(name.EndsWith(".Linux"))		{return !IsLinux;}
+			return true;
+		}
 	}
 }

