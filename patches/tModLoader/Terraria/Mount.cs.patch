--- src/Terraria\Terraria\Mount.cs
+++ src/tModLoader\Terraria\Mount.cs
@@ -6,6 +_,7 @@
 using Terraria.GameContent.Achievements;
 using Terraria.Graphics.Shaders;
 using Terraria.ID;
+using Terraria.ModLoader;
 
 namespace Terraria
 {
@@ -42,8 +_,14 @@
 			}
 		}
 
-		private class MountData
-		{
+		public class MountData
+		{
+			public ModMountData modMountData
+			{
+				get;
+				set;
+			}
+
 			public Texture2D backTexture;
 			public Texture2D backTextureGlow;
 			public Texture2D backTextureExtra;
@@ -141,7 +_,7 @@
 		public const float drillRotationChange = 0.05235988f;
 		public const float maxDrillLength = 48f;
 		public static int currentShader = 0;
-		private static Mount.MountData[] mounts;
+		public static Mount.MountData[] mounts;
 		private static Vector2[] scutlixEyePositions;
 		private static Vector2 scutlixTextureSize;
 		public static Vector2 drillDiodePoint1 = new Vector2(36f, -6f);
@@ -150,28 +_,28 @@
 		public static int drillPickPower = 210;
 		public static int drillPickTime = 6;
 		public static int drillBeamCooldownMax = 1;
-		private Mount.MountData _data;
-		private int _type;
-		private bool _flipDraw;
-		private int _frame;
-		private float _frameCounter;
-		private int _frameExtra;
-		private float _frameExtraCounter;
-		private int _frameState;
-		private int _flyTime;
-		private int _idleTime;
-		private int _idleTimeNext;
-		private float _fatigue;
-		private float _fatigueMax;
-		private bool _abilityCharging;
-		private int _abilityCharge;
-		private int _abilityCooldown;
-		private int _abilityDuration;
-		private bool _abilityActive;
-		private bool _aiming;
+		public Mount.MountData _data;
+		public int _type;
+		public bool _flipDraw;
+		public int _frame;
+		public float _frameCounter;
+		public int _frameExtra;
+		public float _frameExtraCounter;
+		public int _frameState;
+		public int _flyTime;
+		public int _idleTime;
+		public int _idleTimeNext;
+		public float _fatigue;
+		public float _fatigueMax;
+		public bool _abilityCharging;
+		public int _abilityCharge;
+		public int _abilityCooldown;
+		public int _abilityDuration;
+		public bool _abilityActive;
+		public bool _aiming;
 		public List<DrillDebugDraw> _debugDraw;
-		private object _mountSpecificData;
-		private bool _active;
+		public object _mountSpecificData;
+		public bool _active;
 
 		public bool Active
 		{
@@ -1323,14 +_,14 @@
 
 		public static int GetHeightBoost(int MountType)
 		{
-			if (MountType <= -1 || MountType >= 15)
+			if (MountType <= -1 || MountType >= Mount.mounts.Length)
 			{
 				return 0;
 			}
 			return Mount.mounts[MountType].heightBoost;
 		}
 
-		public int JumpHeight(float xVelocity)
+		public int JumpHeight(Player player, float xVelocity)
 		{
 			int num = this._data.jumpHeight;
 			switch (this._type)
@@ -1348,10 +_,11 @@
 					}
 					break;
 			}
+			MountLoader.JumpHeight(player, this._data, ref num, xVelocity);
 			return num;
 		}
 
-		public float JumpSpeed(float xVelocity)
+		public float JumpSpeed(Player player, float xVelocity)
 		{
 			float num = this._data.jumpSpeed;
 			switch (this._type)
@@ -1367,6 +_,7 @@
 					}
 					break;
 			}
+			MountLoader.JumpSpeed(player, this._data, ref num, xVelocity);
 			return num;
 		}
 
@@ -1802,6 +_,10 @@
 
 		public void UpdateFrame(Player mountedPlayer, int state, Vector2 velocity)
 		{
+			if (!MountLoader.UpdateFrame(mountedPlayer, state, velocity))
+			{
+				return;
+			}
 			if (this._frameState != state)
 			{
 				this._frameState = state;
@@ -2287,6 +_,7 @@
 		public void UpdateEffects(Player mountedPlayer)
 		{
 			mountedPlayer.autoJump = this.AutoJump;
+			MountLoader.UpdateEffects(mountedPlayer);
 			switch (this._type)
 			{
 				case 8:
@@ -2461,11 +_,14 @@
 						{
 							Lighting.AddLight(mountedPlayer.Center + Vector2.UnitX * (float)mountedPlayer.direction * 20f, value3.X, value3.Y, value3.Z);
 						}
+						mountedPlayer.allDamage += 0.15f;
+						/*
 						mountedPlayer.meleeDamage += 0.15f;
 						mountedPlayer.rangedDamage += 0.15f;
 						mountedPlayer.magicDamage += 0.15f;
 						mountedPlayer.minionDamage += 0.15f;
 						mountedPlayer.thrownDamage += 0.15f;
+						*/
 					}
 					if (mountedPlayer.statLife <= mountedPlayer.statLifeMax2 / 2)
 					{
@@ -2523,7 +_,7 @@
 			{
 				return;
 			}
-			for (int i = 0; i < 22; i++)
+			for (int i = 0; i < Player.MaxBuffs; i++)
 			{
 				if (mountedPlayer.buffType[i] == this._data.buff)
 				{
@@ -2585,6 +_,7 @@
 		public bool AimAbility(Player mountedPlayer, Vector2 mousePosition)
 		{
 			this._aiming = true;
+			MountLoader.AimAbility(this,mountedPlayer, mousePosition);
 			switch (this._type)
 			{
 				case 8:
@@ -2900,6 +_,7 @@
 			IL_46D:
 			bool flag2 = false;
 			int type5 = this._type;
+			flag2 = !MountLoader.Draw(this, playerDrawData, drawType, drawPlayer, ref texture2D, ref texture2D2, ref Position, ref value, ref drawColor, ref color, ref num5, ref effect, ref origin, ref scale2, shadow);
 			if (!flag2)
 			{
 				DrawData item = new DrawData(texture2D, Position, new Rectangle?(value), drawColor, num5, origin, scale2, effect, 0);
@@ -2968,6 +_,8 @@
 			bool cart = this.Cart;
 			this._active = false;
 			mountedPlayer.ClearBuff(this._data.buff);
+			bool skipDust = false;
+			MountLoader.Dismount(this, mountedPlayer, ref skipDust);
 			this._mountSpecificData = null;
 			if (cart)
 			{
@@ -2977,7 +_,7 @@
 			}
 			mountedPlayer.fullRotation = 0f;
 			mountedPlayer.fullRotationOrigin = Vector2.Zero;
-			if (Main.netMode != 2)
+			if (Main.netMode != 2 && !skipDust)
 			{
 				for (int i = 0; i < 100; i++)
 				{
@@ -3024,7 +_,7 @@
 
 		public void SetMount(int m, Player mountedPlayer, bool faceLeft = false)
 		{
-			if (this._type == m || m <= -1 || m >= 15)
+			if (this._type == m || m <= -1 || m >= mounts.Length)
 			{
 				return;
 			}
@@ -3090,7 +_,9 @@
 			{
 				this._mountSpecificData = new Mount.DrillMountData();
 			}
-			if (Main.netMode != 2)
+			bool skipDust = false;
+			MountLoader.SetMount(this, mountedPlayer, ref skipDust);
+			if (Main.netMode != 2 && !skipDust)
 			{
 				for (int k = 0; k < 100; k++)
 				{

