--- src/Terraria\Terraria.ID\ProjectileID.cs
+++ src/tModLoader\Terraria.ID\ProjectileID.cs
@@ -1,4 +_,6 @@
+using ReLogic.Reflection;
 using System;
+using Terraria.ModLoader;
 
 namespace Terraria.ID
 {
@@ -1199,5 +_,35 @@
 		public const short BookStaffShot = 712;
 		public const short DD2Win = 713;
 		public const short Count = 714;
+
+		public static readonly IdDictionary Search = IdDictionary.Create<ProjectileID, short>();
+
+		public static string GetUniqueKey(int type) {
+			if (type < 0 || type >= ProjectileLoader.ProjectileCount)
+				throw new ArgumentOutOfRangeException("Invalid type: " + type);
+			if (type < Count) {
+				return "Terraria " + ProjectileID.Search.GetName(type);
+			}
+			var modProjectile = ProjectileLoader.GetProjectile(type);
+			return $"{modProjectile.mod.Name} {modProjectile.Name}";
+		}
+
+		public static string GetUniqueKey(Projectile projectile) => GetUniqueKey(projectile.type);
+
+		public static int TypeFromUniqueKey(string key) {
+			string[] parts = key.Split(new char[] { ' ' }, 2);
+			if (parts.Length != 2)
+				return 0;
+			return TypeFromUniqueKey(parts[0], parts[1]);
+		}
+
+		public static int TypeFromUniqueKey(string mod, string name) {
+			if (mod == "Terraria") {
+				if (!ProjectileID.Search.ContainsName(name))
+					return 0;
+				return ProjectileID.Search.GetId(name);
+			}
+			return ModLoader.ModLoader.GetMod(mod)?.ProjectileType(name) ?? 0;
+		}
 	}
 }

